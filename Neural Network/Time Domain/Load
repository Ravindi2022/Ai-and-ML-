% Load the Time Domain dataset
load('TimeD_Data.mat');

% Normalize features
X = normalize(X); % Scale features for better training performance

% Split data into training and testing sets
cv = cvpartition(Y, 'Holdout', 0.2); % 80% training, 20% testing
XTrain = X(training(cv), :);
YTrain = Y(training(cv));
XTest = X(test(cv), :);
YTest = Y(test(cv));

% Define the neural network architecture for Time Domain features
layers = [
    featureInputLayer(size(XTrain, 2), 'Name', 'input') % Input layer
    fullyConnectedLayer(128, 'Name', 'fc1')            % Fully connected layer with 128 neurons
    reluLayer('Name', 'relu1')                         % ReLU activation
    dropoutLayer(0.3, 'Name', 'dropout1')              % Dropout layer for regularization
    fullyConnectedLayer(64, 'Name', 'fc2')             % Fully connected layer with 64 neurons
    reluLayer('Name', 'relu2')                         % ReLU activation
    dropoutLayer(0.3, 'Name', 'dropout2')              % Dropout layer for regularization
    fullyConnectedLayer(length(unique(Y)), 'Name', 'fc_output') % Output layer with #classes neurons
    softmaxLayer('Name', 'softmax')                    % Softmax activation for classification
    classificationLayer('Name', 'output')             % Classification layer
];

% Training options
options = trainingOptions('adam', ...
    'MaxEpochs', 30, ...                     % Number of epochs
    'MiniBatchSize', 32, ...                 % Batch size
    'InitialLearnRate', 0.001, ...           % Learning rate
    'Shuffle', 'every-epoch', ...            % Shuffle data every epoch
    'ValidationData', {XTest, YTest}, ...    % Validation set
    'ValidationFrequency', 10, ...           % Validation frequency
    'Plots', 'training-progress', ...        % Display training progress
    'Verbose', false);                       % Suppress verbose output

% Train the neural network
disp('Training the Neural Network...');
net = trainNetwork(XTrain, YTrain, layers, options);

% Evaluate the neural network
disp('Evaluating the Neural Network...');
YPred = classify(net, XTest); % Predict labels for test data
accuracy = sum(YPred == YTest) / numel(YTest); % Calculate accuracy
disp(['Test Accuracy: ', num2str(accuracy * 100), '%']);

% Display confusion matrix
figure;
confusionchart(YTest, YPred);
title('Confusion Matrix for Time Domain Neural Network');
