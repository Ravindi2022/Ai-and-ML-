% Directory containing the files
dataDir = 'C:\Users\ASUS\Documents\Computer Science @Plymuni . NSBM\3rd Year\AI and ML\Coursework\New folder';

% Display directory path
disp(['Checking directory: ', dataDir]);

% Check directory content
disp('Checking directory content...');
dirContent = dir(dataDir);
if isempty(dirContent)
    error('Directory is empty or path is incorrect.');
else
    disp('Files in the directory:');
    disp({dirContent.name});
end

% Filter for .mat files
files = dir(fullfile(dataDir, '*.mat'));
if isempty(files)
    error('No .mat files found in the directory. Please check the file extensions or path.');
else
    disp(['Number of .mat files found: ', num2str(length(files))]);
    disp({files.name});
end

% Initialize variables for statistics
stats_mean = {};
stats_variance = {};
stats_std = {};
user_ids = {};
feature_counts = [];

% Loop through each file
for i = 1:length(files)
    filePath = fullfile(files(i).folder, files(i).name);
    disp(['Processing file: ', files(i).name]);
    
    % Load the data
    try
        data = load(filePath);
    catch ME
        disp(['Error loading file: ', files(i).name, ' - ', ME.message]);
        continue;
    end
    
    % Get field names in the .mat file
    featureKey = fieldnames(data);
    if isempty(featureKey)
        disp(['Skipping file: ', files(i).name, ' - No fields found in the data.']);
        continue;
    end
    disp(['Fields in the file: ', files(i).name]);
    disp(featureKey);

    % Access the first field (assuming it contains features)
    try
        features = data.(featureKey{1}); % Adjust if necessary
    catch
        disp(['Skipping file: ', files(i).name, ' - Unable to access the first field.']);
        continue;
    end

    % Validate features
    if isempty(features) || ~isnumeric(features)
        disp(['Skipping file: ', files(i).name, ' - Data is empty or not numeric.']);
        continue;
    end

    % Extract user ID
    [~, fileName, ~] = fileparts(files(i).name);
    user_id = fileName(1:3); % e.g., 'U01'
    user_ids = [user_ids; user_id];
    feature_counts = [feature_counts; size(features, 2)];

    % Calculate statistics
    stats_mean{end+1} = mean(features, 1); % Store as cell array
    stats_variance{end+1} = var(features, 0, 1);
    stats_std{end+1} = std(features, 0, 1);
end

% Group statistics by feature count
unique_feature_counts = unique(feature_counts);
for u = 1:length(unique_feature_counts)
    count = unique_feature_counts(u);
    disp(['Statistics for files with ', num2str(count), ' features:']);
    
    % Filter stats for this feature group
    group_idx = (feature_counts == count);
    
    % Concatenate statistics for this group
    group_mean = vertcat(stats_mean{group_idx});
    group_variance = vertcat(stats_variance{group_idx});
    group_std = vertcat(stats_std{group_idx});
    
    % Display as tables
    meanTable = array2table(group_mean, ...
        'VariableNames', strcat('Feature_', string(1:count)));
    varianceTable = array2table(group_variance, ...
        'VariableNames', strcat('Feature_', string(1:count)));
    stdTable = array2table(group_std, ...
        'VariableNames', strcat('Feature_', string(1:count)));
    
    disp('Mean Statistics:');
    disp(meanTable);
    disp('Variance Statistics:');
    disp(varianceTable);
    disp('Standard Deviation Statistics:');
    disp(stdTable);
end
